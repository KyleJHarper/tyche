    01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
L1   h       i1          i2          i3       i4       i5          i6          i7
L2   h                   i1                   i2                   i2
L3   h                                        i1

i == Index
h == Head


Indexes == 2^LEVEL - 1

int max_level == (int)(log(list->count) / log(2));
*buf = list->head;
SkiplistNode *node = NULL;
needed_id = 24;
// Loop through the skip list until we hit level 0, which means we've pointed to the actual list.
while() {
  // If there's no next buffer, go up.
  if (node->next == NULL) {
    if (node->upward == NULL)
      break;
    skiplist_node = skiplist_node->upward;
    continue;
  }

  // We have a valid next; let's see if we can jump to it.
  if (skiplist_node->next->id <= needed_id) {
    skiplist_node = skiplist_node->next;
    continue;
  }

  // The next->id exists but it's too far.  If upward isn't availalble, we're as close as we can get.
  if (skiplist_node->upward == NULL)
    break;
  skiplist_node = skiplist_node->upward;
}
// We're now as close as we can get using the skip lists.  
buf = 
while (skiplist_node->next != NULL) {
  if (skiplist_node->next->id > needed_id)
    break;
  skiplist_node = skiplist_node->next;
}
