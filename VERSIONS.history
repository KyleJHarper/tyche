Contains a simple note for each tagged release.  We will try to follow SEMVER.  Be aware, all 0.x.y releases are developmental and are NOT guaranteed compatible according to SEMVER.  Major version 0 should go away after major release 1... as will this notice probably.

0.0.5 (2015-12-08)
- Added a pthread_self() check to list read locks.  If we hold the write lock, skip it.  Not used yet, but frees us up to use read-only functions while inside of a write operation stack without deadlocking itself.
- Fixed a synchronization issue and reconfirmed performance is good.
- Added a new option (-X) for extended test options.
- Added a new option (-l) to control the buffer:mutex ratio to balance contention with memory sharing.
- Added the ability to run internal tests by specifying the -t option.
- Modified options to be a separate struct and much easier to share among functions in the program.

0.0.4 (2015-11-12)
- Lists now support migrating buffers between them.  Both raw -> comp and backward.
- When a raw list is out of room, it automatically tries to free up space.
- When a compressed list is out of room, it pops the least popular (oldest) generation of compressed buffers.
- When a buffer is missing from the raw list, but found in compressed list, it is restored.  If the restoration requires the raw list be swept to make room, this is supported.
- Switched list lock acquisition and relinquishment to support depth to avoid deadlocks from a single thread, since the goal of locking is always to isolate list operations to a single thread anyway.

0.0.3 (2015-11-04)
- Compression is now functional.
- Updated README and TODO.
- Few touch ups for the upcoming v0.0.4 list management stuff.
- Created the VERSIONS file (this document).

0.0.2 (2015-08-26)
- New locking subsystem completely overhauled the list add/remove functionality.  MUCH faster by means of reference counters, pinning, and a shared lock per-list rather than global locks for everything.

0.0.1 (2015-07-22)
- Basics of adding/removing buffers from a list working.

