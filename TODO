1. Manager
     a) A new structure to manage the lists.  Functions for list review and adjustment.
     b) The primary function, manager__analyze(), is where ACCRS logic should do the real magic.
     c) Manager should be disabled when -F is specified.
     d) Manager should log output of decisions and supporting data.
     e) Research options to accommodate aging and if it's even necessary (newer buffers == more likely to reuse?)
     f) Ensure that a scan protection element exists.
2. Reporting
     a) Totals: buffers read, per second, peak?, etc
     b) Buffer hits, misses/faults, and hit ratio.
     c) Data set information: files found, average size, max size, minimum size, etc.
     d) Logging support, particularly for the manager__* functions.
3. FAQ
     a) Why no size_t?  (Because I want to ensure minium sizes in almost all cases)
     b) Why so much uint/uintX_t?  Because I usually need to accommodate the given size and negative numbers don't exist.
     c) Why no <bla> optimization?  Probably because I'm new to C and didn't know about it.
     d) Why no linked list?  Because I wanted searching without maintaining a skip list.  (Is it even better?)
     e) Why C?  To *hopefully* avoid bias in higher level langages; though they might have optimizations.
     f) Why lz4?  Partly it's compression speed+efficiency, but mostly it's decompression speed.
     g) Locker?  In theory, it reduces memory use by using shared locks among a small number of buffers.  Configurable.
4. Optimizations
     a) Using const on all functions where appropriate.
     b) Figure out how to stop double-scanning with io__* to get the page count.
     c) Inline functions like lock__acquire/release (or simply remove them?)
     d) Switch all uintXX_t types to typedefs so they can be changed more simply in the future; like lockid_t.
     e) Add uint8_t ->count to Locks.  If >= 2* ->lock_ratio this lock is doing too much; try another Lock.
     f) Rerun performance tests for comparison.
     g) Update Makefile to create a debug and release verion of tyche and compare performance.
     h) Switch the enormous list->pool[] to a dynamic array.
