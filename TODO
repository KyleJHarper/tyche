1. Manager
     a) [done] A new structure to manage the lists.  Functions for list review and adjustment.
     b) A thread needs to manage the ACCRS logic for each manager.
     c) List, Manager, and Worker structs need members to track data for ACCRS.
     d) Research options to accommodate aging and if it's even necessary (newer buffers == more likely to reuse?)
     e) Ensure that a scan protection element exists.
     f) Debug logging is probably a good idea for Managers and Workers.
     g) [done] Manager should print tidy, parsable results.
     h) A fixed ratio of 100 should be supported to completely bypass all offloading and list sweeping.
2. FAQ
     a) Why no size_t?  (Because I want to ensure minium sizes in almost all cases)
     b) Why so much uint/uintX_t?  Because I usually need to accommodate the given size and negative numbers don't exist.
     c) Why no <bla> optimization?  Probably because I'm new to C and didn't know about it.
     d) Why no linked list?  Because I wanted searching without maintaining a skip list.  (Is it even better?)
     e) Why C?  To *hopefully* avoid bias in higher level langages; though they might have optimizations.
     f) Why lz4?  Partly it's compression speed+efficiency, but mostly it's decompression speed.
     g) Locker?  In theory, it reduces memory use by using shared locks among a small number of buffers.  Configurable.
3. Optimizations
     a) Using const on all functions where appropriate.
     b) Figure out how to stop double-scanning with io__* to get the page count.
     c) Inline functions like lock__acquire/release (or simply remove them?)
     d) Switch all uintXX_t types to typedefs so they can be changed more simply in the future; like lockid_t.
     e) Add uint8_t ->count to Locks.  If >= 2* ->lock_ratio this lock is doing too much; try another Lock.
     f) Rerun performance tests for comparison.
     g) Update Makefile to create a debug and release verion of tyche and compare performance.
     h) Profile with valgrind to find memory leaks.
     i) Profile with instrumentation (gprof, valgrind --tool=callgrind) and optimize weak points.
     j) Once stable, try testing malloc vs tcmalloc vs jemalloc.  See if any real results exist.
     k) See if list__add can use localized (buffer) locking.
     l) Research localized locking for list__remove(), though I doubt it's reasonable.
     m) See if independent locks for comp list can allow comp list to do work independent of raw list.
4. Niceness
     a) Update all the documentation in the source files.

