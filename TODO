1. Manager
     a) [done] A new structure to manage the lists.  Functions for list review and adjustment.
     b) A thread needs to manage the ACCRS logic for each manager.
     c) List, Manager, and Worker structs need members to track data for ACCRS.
     d) Research options to accommodate aging and if it's even necessary (newer buffers == more likely to reuse?)
     e) Ensure that a scan protection element exists.
     f) Debug logging is probably a good idea for Managers and Workers.
     g) [done] Manager should print tidy, parsable results.
     h) A fixed ratio of 100 should be supported to completely bypass all offloading and list sweeping.
2. FAQ
     a) Why no size_t?  (Because I want to ensure minium sizes in almost all cases)
     b) Why so much uint/uintX_t?  Because I usually need to accommodate the given size and negative numbers don't exist.
     c) Why no <bla> optimization?  Probably because I'm new to C and didn't know about it.
     d) Why no linked list?  Because I wanted searching without maintaining a skip list.  (Is it even better?)
     e) Why C?  To *hopefully* avoid bias in higher level langages; though they might have optimizations.
     f) Why lz4?  Partly it's compression speed+efficiency, but mostly it's decompression speed.
3. Optimizations & Profiling
     f) Rerun performance tests for comparison.
     h) Profile with valgrind to find memory leaks.
     i) Profile with instrumentation (gprof, valgrind --tool=callgrind) and optimize weak points.
     m) See if independent locks for comp list can allow comp list to do work independent of raw list.
        Specifically, can list__remove() the buffers found during a sweep and then immediately free the raw list
        so the list__search() workers can continue?  Maybe with a dont_free flag or something?
     q) Switch back to localized locking but respect levels for node to insert.  See if performance improves.
     s) Parallelize buffer compression during list__sweep().
     t) See if list__restore() and others can stop using the write lock so much, particulary for list__add() calls.
     u) Make write locks more granular if possible.
4. Niceness
     a) Update all the documentation in the source files.
