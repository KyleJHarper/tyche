1. ACCRS
     a) Create windows that rotate every X seconds (or searches) and apply Zipf's Law for distribution.
     b) ????  Make sure that the victim-finding solution never requires more than 1 clock sweep.
              Hunt while actively searching and refuse to affect buffers with pin (could lock up).
     c) ????  The compression efficiency of a buffer should determine if it should simply be evicted.
     d) ????  Keep a list of all buffers we ever insert (just free() data).  Will slow searching but reduce insert/delete.
              This could be detrimental on large data sets.
     e) ????  Keep compressed size after a restoration to prevent guessing when testing for evicting again.
     f) Copy-On-Write needs to be a thing...


99. FAQ
     a) Why no size_t?  (Because I want to ensure minium sizes in almost all cases)
     b) Why so much uint/uintX_t?  Because I usually need to accommodate the given size and negative numbers don't exist.
     c) Why no <bla> optimization?  Probably because I'm new to C and didn't know about it.
     e) Why C?  To *hopefully* avoid bias in higher level langages; though they might have optimizations.
     f) Why lz4?  Partly it's compression speed+efficiency, but mostly it's decompression speed.
     g) Your page replacement is sub-optimal compared to <some_other_strategy>!
        Might be.  But it's fast enough to not be a bottleneck and prove the point I'm trying to make with compression.
     h) Your program uses more memory than -m allows.
        Yes, for workers, managers, compressors, etc.  -m is for buffer space.  The only exception is 32 bytes per buffer
        (probabilistically) for a SkipListNode per buffer; but I can live with this.
     i) Your headers are insane!
        I know, but header guards make life happy.  If someone would like to fix it and submit a PR, go ahead.


thr_1  gets state0
thr_2  gets state0
thr_3  gets state0
thr_4  gets state0
...
thr_3  updates and gets state1 put in the list,  state0 is marked 'dirty'
thr_1 2 and 4  all have a dirty state0
...
thr_5  gets state1
thr_6  gets state1
...
thr_2  wants to update but state0 is dirty

list__update(list, buffer, *data)
  if (buffer->ref_count < 1)
    return W_NO_UPDATE_WITHOUT_PIN;
  if (buffer->flags & BUFFER_IS_DIRTY)
    return W_NO_UPDATE_DIRTY_BUFFER;  // Warning code here.
